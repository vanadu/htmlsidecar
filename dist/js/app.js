/*!
 * clipboard.js v1.5.16
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT Â© Zeno Rocha
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Clipboard=e()}}((function(){return function e(t,i,n){function r(o,l){if(!i[o]){if(!t[o]){var c="function"==typeof require&&require;if(!l&&c)return c(o,!0);if(a)return a(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var p=i[o]={exports:{}};t[o][0].call(p.exports,(function(e){var i=t[o][1][e];return r(i||e)}),p,p.exports,e,t,i,n)}return i[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,i){if(Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}t.exports=function(e,t){for(;e&&9!==e.nodeType;){if(e.matches(t))return e;e=e.parentNode}}},{}],2:[function(e,t,i){var n=e("./closest");function r(e,t,i,r){return function(i){i.delegateTarget=n(i.target,t),i.delegateTarget&&r.call(e,i)}}t.exports=function(e,t,i,n,a){var o=r.apply(this,arguments);return e.addEventListener(i,o,a),{destroy:function(){e.removeEventListener(i,o,a)}}}},{"./closest":1}],3:[function(e,t,i){i.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},i.nodeList=function(e){var t=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===t||"[object HTMLCollection]"===t)&&"length"in e&&(0===e.length||i.node(e[0]))},i.string=function(e){return"string"==typeof e||e instanceof String},i.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},{}],4:[function(e,t,i){var n=e("./is"),r=e("delegate");t.exports=function(e,t,i){if(!e&&!t&&!i)throw new Error("Missing required arguments");if(!n.string(t))throw new TypeError("Second argument must be a String");if(!n.fn(i))throw new TypeError("Third argument must be a Function");if(n.node(e))return function(e,t,i){return e.addEventListener(t,i),{destroy:function(){e.removeEventListener(t,i)}}}(e,t,i);if(n.nodeList(e))return function(e,t,i){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,i)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,i)}))}}}(e,t,i);if(n.string(e))return function(e,t,i){return r(document.body,e,t,i)}(e,t,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},{"./is":3,delegate:2}],5:[function(e,t,i){t.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName)e.focus(),e.setSelectionRange(0,e.value.length),t=e.value;else{e.hasAttribute("contenteditable")&&e.focus();var i=window.getSelection(),n=document.createRange();n.selectNodeContents(e),i.removeAllRanges(),i.addRange(n),t=i.toString()}return t}},{}],6:[function(e,t,i){function n(){}n.prototype={on:function(e,t,i){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:i}),this},once:function(e,t,i){var n=this;function r(){n.off(e,r),t.apply(i,arguments)}return r._=t,this.on(e,r,i)},emit:function(e){for(var t=[].slice.call(arguments,1),i=((this.e||(this.e={}))[e]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,t);return this},off:function(e,t){var i=this.e||(this.e={}),n=i[e],r=[];if(n&&t)for(var a=0,o=n.length;a<o;a++)n[a].fn!==t&&n[a].fn._!==t&&r.push(n[a]);return r.length?i[e]=r:delete i[e],this}},t.exports=n},{}],7:[function(e,t,i){!function(n,r){if(void 0!==i)r(t,e("select"));else{var a={exports:{}};r(a,n.select),n.clipboardAction=a.exports}}(this,(function(e,t){"use strict";var i,n=(i=t)&&i.__esModule?i:{default:i};var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var a=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return a(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.addEventListener("focus",window.scrollTo(0,i)),this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":r(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=o}))},{select:5}],8:[function(e,t,i){!function(n,r){if(void 0!==i)r(t,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var a={exports:{}};r(a,n.clipboardAction,n.tinyEmitter,n.goodListener),n.clipboard=a.exports}}(this,(function(e,t,i,n){"use strict";var r=l(t),a=l(i),o=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();var s=function(e){function t(e,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.resolveOptions(i),n.listenClick(e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),c(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,o.default)(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new r.default({action:this.action(t),target:this.target(t),text:this.text(t),trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return p("action",e)}},{key:"defaultTarget",value:function(e){var t=p("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return p("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}]),t}(a.default);function p(e,t){var i="data-clipboard-"+e;if(t.hasAttribute(i))return t.getAttribute(i)}e.exports=s}))},{"./clipboard-action":7,"good-listener":4,"tiny-emitter":6}]},{},[8])(8)})),function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Clipboard=e()}}((function(){return function e(t,i,n){function r(o,l){if(!i[o]){if(!t[o]){var c="function"==typeof require&&require;if(!l&&c)return c(o,!0);if(a)return a(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var p=i[o]={exports:{}};t[o][0].call(p.exports,(function(e){var i=t[o][1][e];return r(i||e)}),p,p.exports,e,t,i,n)}return i[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,i){var n=9;if(Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}t.exports=function(e,t){for(;e&&e.nodeType!==n;){if(e.matches(t))return e;e=e.parentNode}}},{}],2:[function(e,t,i){function n(e,t,i,n){return function(i){i.delegateTarget=r(i.target,t),i.delegateTarget&&n.call(e,i)}}var r=e("./closest");t.exports=function(e,t,i,r,a){var o=n.apply(this,arguments);return e.addEventListener(i,o,a),{destroy:function(){e.removeEventListener(i,o,a)}}}},{"./closest":1}],3:[function(e,t,i){i.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},i.nodeList=function(e){var t=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===t||"[object HTMLCollection]"===t)&&"length"in e&&(0===e.length||i.node(e[0]))},i.string=function(e){return"string"==typeof e||e instanceof String},i.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},{}],4:[function(e,t,i){var n=e("./is"),r=e("delegate");t.exports=function(e,t,i){if(!e&&!t&&!i)throw new Error("Missing required arguments");if(!n.string(t))throw new TypeError("Second argument must be a String");if(!n.fn(i))throw new TypeError("Third argument must be a Function");if(n.node(e))return function(e,t,i){return e.addEventListener(t,i),{destroy:function(){e.removeEventListener(t,i)}}}(e,t,i);if(n.nodeList(e))return function(e,t,i){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,i)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,i)}))}}}(e,t,i);if(n.string(e))return function(e,t,i){return r(document.body,e,t,i)}(e,t,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},{"./is":3,delegate:2}],5:[function(e,t,i){t.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName)e.focus(),e.setSelectionRange(0,e.value.length),t=e.value;else{e.hasAttribute("contenteditable")&&e.focus();var i=window.getSelection(),n=document.createRange();n.selectNodeContents(e),i.removeAllRanges(),i.addRange(n),t=i.toString()}return t}},{}],6:[function(e,t,i){function n(){}n.prototype={on:function(e,t,i){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:i}),this},once:function(e,t,i){function n(){r.off(e,n),t.apply(i,arguments)}var r=this;return n._=t,this.on(e,n,i)},emit:function(e){for(var t=[].slice.call(arguments,1),i=((this.e||(this.e={}))[e]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,t);return this},off:function(e,t){var i=this.e||(this.e={}),n=i[e],r=[];if(n&&t)for(var a=0,o=n.length;a<o;a++)n[a].fn!==t&&n[a].fn._!==t&&r.push(n[a]);return r.length?i[e]=r:delete i[e],this}},t.exports=n},{}],7:[function(e,t,i){!function(n,r){if(void 0!==i)r(t,e("select"));else{var a={exports:{}};r(a,n.select),n.clipboardAction=a.exports}}(this,(function(e,t){"use strict";var i=function(e){return e&&e.__esModule?e:{default:e}}(t),n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),a=function(){function e(t){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.resolveOptions(t),this.initSelection()}return r(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.addEventListener("focus",window.scrollTo(0,n)),this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,i.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,i.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":n(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=a}))},{select:5}],8:[function(e,t,i){!function(n,r){if(void 0!==i)r(t,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var a={exports:{}};r(a,n.clipboardAction,n.tinyEmitter,n.goodListener),n.clipboard=a.exports}}(this,(function(e,t,i,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var i="data-clipboard-"+e;if(t.hasAttribute(i))return t.getAttribute(i)}var o=r(t),l=r(i),c=r(n),s=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),p=function(e){function t(e,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.resolveOptions(i),n.listenClick(e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),s(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,c.default)(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new o.default({action:this.action(t),target:this.target(t),text:this.text(t),trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return a("action",e)}},{key:"defaultTarget",value:function(e){var t=a("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return a("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}]),t}(l.default);e.exports=p}))},{"./clipboard-action":7,"good-listener":4,"tiny-emitter":6}]},{},[8])(8)}));var Witty=function(){var e,t=document.querySelector("#testme"),i=document.querySelector("#testme2"),n=function(){};e=!0,t.onclick=function(){(e=!e)?i.addEventListener("click",n,!1):i.removeEventListener("click",n,!1)};let r={};var a=function(){const e={insFilename:"#ins-filename",insDisplay:"#ins-display-size",insDisksize:"#ins-disk-size",insAspect:"#ins-aspect",insSmallPhones:"#ins-small-phones",insLargePhones:"#ins-large-phones",insRetina:"#ins-retina",btnToggleCcp:"#btn-toggle-ccp",spnDisplaySizeHeight:"#spn-display-size-height",spnDisplaySizeWidth:"#spn-display-size-width",spnSmallPhonesHeight:"#spn-small-phones-height",spnSmallPhonesWidth:"#spn-small-phones-width",spnLargePhonesHeight:"#spn-large-phones-height",spnLargePhonesWidth:"#spn-large-phones-width"},t={insDisplaySizeLabel:"#ins-display-size-label",insDiskSizeLabel:"#ins-disk-size-label",insAspectLabel:"#ins-aspect-label",insSmallPhonesLabel:"#ins-small-phones-label",insLargePhonesLabel:"#ins-large-phones-label",insRetinaLabel:"#ins-retina-label"},i={insDisplaySizeWidthValue:"#ins-display-size-width-value",insDisplaySizeHeightValue:"#ins-display-size-height-value",insDiskSizeWidthValue:"#ins-disk-size-width-value",insDiskSizeHeightValue:"#ins-disk-size-height-value",insAspectValue:"#ins-aspect-value",insSmallPhonesWidthValue:"#ins-small-phones-width-value",insSmallPhonesHeightValue:"#ins-small-phones-height-value",insLargePhonesWidthValue:"#ins-large-phones-width-value",insLargePhonesHeightValue:"#ins-large-phones-height-value",insRetinaWidthValue:"#ins-retina-width-value",insRetinaHeightValue:"#ins-retina-height-value"},n={iptTbrViewerW:"#ipt-tbr-viewerw",btnTbrIncr50:"#btn-tbr-incr50",btnTbrIncr10:"#btn-tbr-incr10",btnTbrIncr01:"#btn-tbr-incr01",iptTbrImgWidth:"#ipt-tbr-imgwidth",iptTbrImgHeight:"#ipt-tbr-imgheight",btnTbrDecr01:"#btn-tbr-decr01",btnTbrDecr10:"#btn-tbr-decr10",btnTbrDecr50:"#btn-tbr-decr50",iptTbrSPhonesWidth:"#ipt-tbr-sphones-width",iptTbrLPhonesWidth:"#ipt-tbr-lphones-width"},o={curImg:"#cur-img",imgViewer:"#main-image-viewer",imgViewport:"#image-viewport",appContainer:"#app-container"},c={dropArea:"#drop-area",tbrContainer:"#toolbar-container",ccpContainer:"#ccp",msgContainer:"#msg-container",appBlocker:"#app-blocker",hdrIsolateApp:".header-isolate-app"},s={iptCcpImgClass:"#ipt-ccp-img-class",iptCcpImgAlt:"#ipt-ccp-img-alt",spnCcpImgIncludeWidthHeightCheckmrk:"#spn-ccp-img-include-width-height-checkmrk",selCcpImgAlign:"#sel-ccp-img-align",iptCcpImgRelPath:"#ipt-ccp-img-relpath",spnCcpImgIncludeAnchorCheckmrk:"#spn-ccp-img-include-anchor-checkmrk",iptCcpTdClass:"#ipt-ccp-td-class",selCcpTdAlign:"#sel-ccp-td-align",selCcpTdValign:"#sel-ccp-td-valign",iptCcpTdHeight:"#ipt-ccp-td-height",iptCcpTdWidth:"#ipt-ccp-td-width",iptCcpTdBgColor:"#ipt-ccp-td-bgcolor",iptCcpTdFontColor:"#ipt-ccp-td-fontcolor",iptCcpTdBorderColor:"#ipt-ccp-td-bordercolor",iptCcpTdBorderRadius:"#ipt-ccp-td-borderradius",rdoCcpTdBasic:"#rdo-ccp-td-basic",rdoCcpTdExcludeimg:"#rdo-ccp-td-excludeimg",rdoCcpTdImgswap:"#rdo-ccp-td-imgswap",rdoCcpTdPosswitch:"#rdo-ccp-td-posswitch",rdoCcpTdBgimage:"#rdo-ccp-td-bgimage",rdoCcpTdVmlbutton:"#rdo-ccp-td-vmlbutton",iptCcpTableClass:"#ipt-ccp-table-class",selCcpTableAlign:"#sel-ccp-table-align",iptCcpTableWidth:"#ipt-ccp-table-width",iptCcpTableBgColor:"#ipt-ccp-table-bgcolor",spnCcpTableIncludeWrapperCheckmrk:"#spn-ccp-table-include-wrapper-checkmrk",iptCcpTableWrapperClass:"#ipt-ccp-table-wrapper-class",iptCcpTableWrapperWidth:"#ipt-ccp-table-wrapper-width",selCcpTableWrapperAlign:"#sel-ccp-table-wrapper-align",iptCcpTableWrapperBgColor:"#ipt-ccp-table-wrapper-bgcolor"},p={selCcpImgAlignLabel:"#sel-ccp-img-align-label",iptCcpImgClassLabel:"#ipt-ccp-img-class-label",iptCcpImgRelpathLabel:"#ipt-ccp-img-relpath-label",iptCcpImgAltLabel:"#ipt-ccp-img-alt-label",iptCcpImgIncludeWidthHeightLabel:"#ccp-img-include-width-height-label"},d={btnCcpMakeImgTag:"#btn-ccp-make-img-tag",btnCcpMakeTdTag:"#btn-ccp-make-td-tag",btnCcpMakeTableTag:"#btn-ccp-make-table-tag",btnCcpMakeImgDsktpCssRule:"#btn-ccp-make-img-dsktp-css-rule",btnCcpMakeImgSmphnCssRule:"#btn-ccp-make-img-smphn-css-rule",btnCcpMakeImgLgphnCssRule:"#btn-ccp-make-img-lgphn-css-rule",btnCcpMakeTdDsktpCssRule:"#btn-ccp-make-td-dsktp-css-rule",btnCcpMakeTdSmphnCssRule:"#btn-ccp-make-td-smphn-css-rule",btnCcpMakeTdLgphnCssRule:"#btn-ccp-make-td-lgphn-css-rule",btnCcpMakeTableDsktpCssRule:"#btn-ccp-make-table-dsktp-css-rule",btnCcpMakeTableSmphnCssRule:"#btn-ccp-make-table-smphn-css-rule",btnCcpMakeTableLgphnCssRule:"#btn-ccp-make-table-lgphn-css-rule"},u={tipContent:"#tip-content",msgContent:"#msg-content",errContent:"#err-content"};return{displayAppMessages:function(e,t,i){e?function(e,t){document.querySelector(e).classList.add("active"),e.includes("tip")||document.querySelector(c.appBlocker).classList.add("active")}(t):function(e,t){document.querySelector(c.appBlocker).classList.remove("active"),document.querySelector(e).classList.remove("active")}(t)},getInspectorElementIDs:function(){return e},getInspectorValuesIDs:function(){return i},getInspectorLabelsIDs:function(){return t},getToolButtonIDs:function(){return n},getDynamicRegionIDs:function(){return o},getStaticRegionIDs:function(){return c},getCcpUserInputIDs:function(){return s},getCcpUserInputLabelIds:function(){return p},getBtnCcpMakeClips:function(){return d},getAppMessageElements:function(){return u},initToolbarInputs:function(){},queryDOMElements:function(){var t={fname:void 0,viewerW:void 0,viewerH:void 0,imgW:void 0,imgH:void 0,imgNW:void 0,imgNH:void 0,sPhonesW:void 0,lPhonesW:void 0};t.fname=document.querySelector(e.insFilename).textContent;var i=document.querySelector(o.curImg),a=document.querySelector(o.imgViewer),l=window.getComputedStyle(a);return t.viewerW=parseInt(l.getPropertyValue("width"),10),t.viewerH=parseInt(l.getPropertyValue("height"),10),t.imgW=i.width,t.imgH=i.height,t.imgNW=i.naturalWidth,t.imgNH=i.naturalHeight,t.sPhonesW=parseInt(document.querySelector(n.iptTbrSPhonesWidth).getAttribute("data-sphonesw"),10),t.lPhonesW=parseInt(document.querySelector(n.iptTbrLPhonesWidth).getAttribute("data-lphonesw"),10),t.iptTbrSPhonesWidth?t.iptTbrSPhonesWidth:r.iptTbrSPhonesWidth=parseInt(document.querySelector(n.iptTbrSPhonesWidth).placeholder,10),t.iptTbrLPhonesWidth?t.iptTbrLPhonesWidth:r.iptTbrLPhonesWidth=parseInt(document.querySelector(n.iptTbrLPhonesWidth).placeholder,10),t},initUI:function(t){"devmode"===t&&setTimeout((function(){document.querySelector(c.tbrContainer).style.display="block",document.querySelector(o.curImg).style.display="block";var t=document.querySelector(o.curImg).src;t=(t=t.split("/"))[t.length-1],document.querySelector(e.insFilename).textContent=t,l.initCalcViewerSize(),document.querySelector(c.ccpContainer).classList.add("active"),l.initInitCCP()}),10);let i=[],r=[];i=["viewerW","sPhonesW","lPhonesW"];for(let e=0;e<i.length;e++)localStorage.getItem(i[e])?r.push(localStorage.getItem(i[e])):r.push(!1);r[0]?document.querySelector(n.iptTbrViewerW).value=r[0]:document.querySelector(n.iptTbrViewerW).value=document.querySelector(n.iptTbrViewerW).placeholder,r[1]?r[1]:r[1]=document.querySelector(n.iptTbrSPhonesWidth).placeholder,document.querySelector(n.iptTbrSPhonesWidth).value=r[1],document.querySelector(n.iptTbrSPhonesWidth).setAttribute("data-sphonesw",r[1]),r[2]?r[2]:r[2]=document.querySelector(n.iptTbrLPhonesWidth).placeholder,document.querySelector(n.iptTbrLPhonesWidth).value=r[2],document.querySelector(n.iptTbrLPhonesWidth).setAttribute("data-lphonesw",r[2]),document.querySelector(c.dropArea).style.display="flex",document.querySelector(c.tbrContainer).style.display="none",document.querySelector(e.btnToggleCcp).style.display="none"},writeInspectors:function(){var t;t=l.initGetAppdata(),document.querySelector(c.dropArea).style.display="none",document.querySelector(e.insFilename).innerHTML=`<span class='pop-font'>${t.fname}</span>`;for(let e=0;e<document.getElementsByClassName("no-image").length;e++)document.getElementsByClassName("no-image")[e].style.display="none";for(let e=0;e<document.getElementsByClassName("inspector-label").length;e++)document.getElementsByClassName("inspector-label")[e].style.display="inline";for(let e=0;e<document.getElementsByClassName("inspector-x").length;e++)document.getElementsByClassName("inspector-x")[e].style.display="inline";document.querySelector(i.insDisplaySizeWidthValue).innerHTML=t.imgW,document.querySelector(i.insDisplaySizeHeightValue).innerHTML=t.imgH,document.querySelector(i.insDiskSizeWidthValue).innerHTML=t.imgNW,document.querySelector(i.insDiskSizeHeightValue).innerHTML=t.imgNH,document.querySelector(i.insSmallPhonesWidthValue).innerHTML=t.sPhonesW,document.querySelector(i.insSmallPhonesHeightValue).innerHTML=t.sPhonesH,document.querySelector(i.insLargePhonesWidthValue).innerHTML=t.lPhonesW,document.querySelector(i.insLargePhonesHeightValue).innerHTML=t.lPhonesH,document.querySelector(i.insAspectValue).innerHTML=t.aspect[1],document.querySelector(i.insRetinaWidthValue).innerHTML=2*t.imgW,document.querySelector(i.insRetinaHeightValue).innerHTML=2*t.imgH,document.querySelector(e.btnToggleCcp).style.display="block",function(e){let t=[],i=[];t=a.getInspectorLabelsIDs(),e.imgNW<2*e.imgW&&i.push(t.insDiskSizeLabel),e.imgNW<2*e.sPhonesW&&i.push(t.insSmallPhonesLabel),e.imgNW<2*e.lPhonesW&&i.push(t.insLargePhonesLabel),a.writeInspectorAlerts(i)}(t)},writeInspectorAlerts:function(e){for(let e=0;e<document.getElementsByClassName("inspector-label").length;e++)document.getElementsByClassName("inspector-label")[e].style.color="inherit";!1===Array.isArray(e)&&(e=Object.values(e));for(let t=0;t<e.length;t++)document.querySelector(e[t]).style.color="red"},displayTdOptions:function(e){let t,i,n,r=[],a=[];function o(e){return e="#"+e.substring(5)}function c(e){for(let t=0;t<e.length;t++)i=o(e[t]),document.querySelector(i).classList.add("active")}n=l.initGetAppdata(),t="#"+e.target.id,r=[s.iptCcpTdClass,s.selCcpTdAlign,s.selCcpTdValign,s.iptCcpTdHeight,s.iptCcpTdWidth,s.iptCcpTdBgColor,s.iptCcpTdFontColor,s.iptCcpTdBorderColor,s.iptCcpTdBorderRadius];for(let e=0;e<r.length;e++)i=o(r[e]),document.querySelector(i).classList.remove("active");switch(document.querySelector(s.iptCcpTdHeight).value="",document.querySelector(s.iptCcpTdWidth).value="",document.querySelector(s.iptCcpTdBgColor).value="",!0){case t===s.rdoCcpTdBasic||t===s.rdoCcpTdExcludeimg:a=[s.iptCcpTdClass,s.selCcpTdAlign,s.selCcpTdValign,s.iptCcpTdHeight,s.iptCcpTdWidth,s.iptCcpTdBgColor],c(a);break;case t===s.rdoCcpTdPosswitch:a=[s.iptCcpTdClass,s.selCcpTdAlign,s.selCcpTdValign,s.iptCcpTdBgColor],c(a);break;case t===s.rdoCcpTdImgswap:a=[s.iptCcpTdClass,s.selCcpTdAlign,s.selCcpTdValign],c(a);break;case t===s.rdoCcpTdBgimage:a=[s.iptCcpTdClass,s.iptCcpTdHeight,s.iptCcpTdWidth,s.iptCcpTdBgColor],c(a),document.querySelector(s.iptCcpTdHeight).value=n.imgH,document.querySelector(s.iptCcpTdWidth).value=n.imgW,document.querySelector(s.iptCcpTdBgColor).value="#7bceeb";break;case t===s.rdoCcpTdVmlbutton:a=[s.iptCcpTdClass,s.iptCcpTdHeight,s.iptCcpTdWidth,s.iptCcpTdBgColor,s.iptCcpTdFontColor,s.iptCcpTdBorderColor,s.iptCcpTdBorderRadius],c(a),document.querySelector(s.iptCcpTdHeight).value="40",document.querySelector(s.iptCcpTdWidth).value="200",document.querySelector(s.iptCcpTdBgColor).value="#556270",document.querySelector(s.iptCcpTdFontColor).value="#FFFFFF",document.querySelector(s.iptCcpTdBorderColor).value="#1e3650",document.querySelector(s.iptCcpTdBorderRadius).value="4"}}}}(),o=function(){var e=a.getInspectorElementIDs(),t=(a.getInspectorValuesIDs(),a.getInspectorLabelsIDs(),a.getCcpUserInputIDs()),i=a.getBtnCcpMakeClips();function n(){var i=l.initGetAppdata();let n,a,d,u,h;return{imgClass:r("class",document.querySelector(t.iptCcpImgClass).value),imgWidth:i.imgW,imgHeight:i.imgH,imgAlt:r("alt",document.querySelector(t.iptCcpImgAlt).value),imgSrc:function(){if(document.querySelector(t.iptCcpImgRelPath).value)return document.querySelector(t.iptCcpImgRelPath).value+"/"+document.querySelector(e.insFilename).textContent}(),imgStyle:function(){let e,n,r;return e=t.spnCcpImgIncludeWidthHeightCheckmrk,n=c(e),r=!0===n?`display: block; width: ${i.imgW}px; height: ${i.imgH}px; font-family: Arial, sans-serif; font-size: 16px; line-height: 15px; text-decoration: none; border: none; outline: none;`:"display: block; font-family: Arial, sans-serif; font-size: 16px; line-height: 15px; text-decoration: none; border: none; outline: none;",r}(),imgAlign:(d="",u=[],h="",h=t.selCcpImgAlign,u=["","left","center","right"],d=o(h,u),d),imgIncludeAnchor:function(){let e,i;return e=t.spnCcpImgIncludeAnchorCheckmrk,i=c(e),i}(),tdAppdataWidth:i.imgW,tdAppdataHeight:i.imgH,tdHeight:p("height",document.querySelector(t.iptCcpTdHeight).value),tdWidth:p("width",document.querySelector(t.iptCcpTdWidth).value),tdBasic:(n=t.rdoCcpTdBasic,a=s(n),a),tdImgswap:(n=t.rdoCcpTdBasic,a=s(n),a),tdBgimage:(n=t.rdoCcpTdBgimage,a),tdPosswitch:(n=t.rdoCcpTdPosswitch,a=s(n),a),tdAlign:function(){let e="",i=[],n="";return n=t.selCcpTdAlign,i=["","left","center","right"],e=o(n,i),e}(),tdValign:function(){let e="",i=[],n="";return n=t.selCcpTdValign,i=["","top","middle","bottom"],e=o(n,i),e}(),tdClass:r("class",document.querySelector(t.iptCcpTdClass).value),tdBgcolor:r("class",document.querySelector(t.iptCcpTdBgColor).value),tdBackground:document.querySelector(t.iptCcpImgRelPath).value+"/"+i.fname,tableClass:p("class",document.querySelector(t.iptCcpTableClass).value),tableWidth:document.querySelector(t.iptCcpTableWidth).value,tableBgcolor:p("bgcolor",document.querySelector(t.iptCcpTableBgColor).value),tableAlign:function(){let e="",i=[],n="";return n=t.selCcpTableAlign,i=["","left","center","right"],e=o(n,i),e}(),tableIncludeWrapper:function(){let e,i;return e=t.spnCcpTableIncludeWrapperCheckmrk,i=c(e),i}(),tableTagWrapperClass:p("class",document.querySelector(t.iptCcpTableWrapperClass).value),tableTagWrapperAlign:function(){let e="",i=[],n="";return n=t.selCcpTableWrapperAlign,i=["","left","center","right"],e=o(n,i),e}(),tableTagWrapperWidth:document.querySelector(t.iptCcpTableWrapperWidth).value,tableTagWrapperBgcolor:p("bgcolor",document.querySelector(t.iptCcpTableWrapperBgColor).value)}}function r(e,t){var i=l.initGetAppdata();return t&&e?"#"===t?"":t:"src"===e&&""===t?`${e}="${i.fname}" `:""}function o(e,t){var i,n;switch(n=document.querySelector(e).selectedIndex,!0){case 0===n:i="";break;case 1===n:i=t[1];break;case 2===n:i=t[2];break;case 3===n:i=t[3]}return i}function c(e){let t,i;return t=document.querySelector(e).id,t=t.replace("mrk","box"),t=t.replace("spn","chk"),i=!1!==document.querySelector("#"+t).checked,i}function s(e){let t,i;return t=document.querySelector(e).id,i=!1!==document.querySelector("#"+t).checked,i}function p(e,t){var i=l.initGetAppdata();return t&&e?"#"===t?"":t:"src"===e&&""===t?`${e}="${i.fname}" `:""}function d(e){let r={};r={buttonClicked:"",hasAnchor:c(t.spnCcpImgIncludeAnchorCheckmrk),hasWrapper:c(t.spnCcpTableIncludeWrapperCheckmrk),selectedRadio:document.querySelector('input[name="tdoptions"]:checked').value},e===i.btnCcpMakeImgTag.slice(1)?(r.buttonClicked="imgbut",r.selectedRadio="basic"):e===i.btnCcpMakeTdTag.slice(1)?r.buttonClicked="tdbut":r.buttonClicked="tablebut",function(e,r){let a,o,s,p,d;a=function(e,i){let r,a,o,s,p,d,u,h;r=n(),h=document.createDocumentFragment(),a=document.createElement("table"),o=document.createElement("tr"),s=document.createElement("td"),p=document.createElement("table"),d=document.createElement("tr"),r.tableClass&&(p.className=r.tableClass);r.tableAlign&&(p.align=r.tableAlign);p.width=r.tableWidth,r.tableBgcolor&&(p.bgColor=r.tableBgcolor);p.border="0",p.cellSpacing="0",p.cellPadding="0",p.setAttribute("role","presentation"),p.appendChild(d),u=function(e,i){let r,a,o,s,p;a=n(),o=document.createElement("td"),p=document.createDocumentFragment(),a.tdBgcolor&&(o.bgColor=a.tdBgcolor);switch(!0){case"basic"===i.selectedRadio||"excludeimg"===i.selectedRadio:a.tdClass&&(o.className=a.tdClass),a.tdAlign&&(o.align=a.tdAlign),a.tdValign&&(o.vAlign=a.tdValign),a.tdHeight&&(o.height=a.imgWidth),a.tdWidth&&(o.width=a.imgHeight),"basic"===i.selectedRadio&&(s=function(e){let t,i,r;t=n(),i=document.createElement("img"),r=document.createDocumentFragment(),t.imgClass&&(i.className=t.imgClass);t.imgAlt&&(i.alt=t.imgAlt);i.src=t.imgSrc,i.width=t.imgWidth,i.height=t.imgHeight,i.setAttribute("style",t.imgStyle),t.imgAlign&&(i.align=t.imgAlign);if(i.border="0",!0===t.imgIncludeAnchor){let e=document.createElement("a");e.href="#",e.setAttribute("style","color: #FF0000"),e.appendChild(i),r.appendChild(e)}else r.appendChild(i);return r}(),o.appendChild(s));break;case"imgswap"===i.selectedRadio:a.tdClass&&(o.className=a.tdClass),a.tdValign&&(o.vAlign=a.tdValign),a.tdAlign&&(o.align=a.tdAlign);break;case"bgimage"===i.selectedRadio:o.width=a.tdAppdataWidth,o.height=a.tdAppdataHeight,o.vAlign=a.tdValign,o.setAttribute("background",a.tdBackground);break;case"posswitch"===i.selectedRadio:o=function(e){let i,r,a,o=[],l=[],s=[],p=[],d=[],u=[],h=[],g=[],m=[];o=["container","td_switchcontainer","table_switchparent","tr_switchparent"],l=["div","td","table","tr"],s=["container","td_switchsibling1","table_switchchild1","tr_switchchild1","td_switchcontent1","a_switchtcontent","img_switchcontent1"],p=["div","td","table","tr","td","a","img"],d=["container","td_switchsibling2","table_switchchild2","tr_switchchild2","td_switchcontent2"],u=["div","td","table","tr","td"],c(t.spnCcpImgIncludeAnchorCheckmrk)||(a=5,s.splice(5,1),p.splice(5,1));for(i=0;i<o.length;i++)h[i]=document.createElement(l[i]),h[i].id=o[i];for(i=0;i<h.length-1;i++)r=i+1,h[i].appendChild(h[r]);for(i=0;i<s.length;i++)g[i]=document.createElement(p[i]),g[i].id=s[i];for(i=0;i<g.length-1;i++)r=i+1,g[i].appendChild(g[r]);for(i=0;i<d.length;i++)m[i]=document.createElement(u[i]),m[i].id=d[i];for(i=0;i<m.length-1;i++)r=i+1,m[i].appendChild(m[r]);h[3].appendChild(g[1]),h[3].appendChild(m[1]);let b=h[0];return b=function(e){var i;let r,a,o,l,s,p,d,u,h,g,m,b,f,y=n(),v=[];i=e.querySelectorAll("*"),y.tdClass?i[0].setAttribute("class",y.tdClass):y.tdClass,y.tdBgcolor?i[0].setAttribute("bgcolor",y.tdBgcolor):y.tdBgcolor,r={dir:"rtl",width:"100%",align:y.tdAlign,valign:y.tdValign},a={role:"presentation",border:"0",width:"100%",cellPadding:"0",cellSpacing:"0"},o={},l={width:"50%",class:"stack-column-center"},s={role:"presentation",border:"0",width:"100%",cellPadding:"0",cellSpacing:"0"},p={},d={dir:"ltr",align:"left",vAlign:"top"},u={href:"#",color:"red"},h={width:y.imgWidth,height:y.imgHeight,style:y.imgStyle,src:y.imgSrc,alt:y.imgAlt},g={width:"50%",class:"stack-column-center"},m={role:"presentation",border:"0",width:"100%",cellPadding:"0",cellSpacing:"0"},b={},f={dir:"ltr",align:"left",vAlign:"top"},v=[r,a,o,l,s,p,d,u,h,g,m,b,f],c(t.spnCcpImgIncludeAnchorCheckmrk)||(7,v.splice(7,1));for(let e=0;e<v.length;e++)for(let t of Object.entries(v[e]))i[e].setAttribute(t[0],t[1]);for(let e=0;e<i.length;e++)i[e].removeAttribute("id");return e}(b),b.children[0]}();break;case"vmlbutton"===i.selectedRadio:document.querySelector(t.iptCcpTdHeight).value&&document.querySelector(t.iptCcpTdWidth).value?(o.width=a.tdWidth,o.height=a.tdHeight):r=!0,document.querySelector(t.iptCcpTdHeight).value!==a.imgHeight&&l.initMessage(e,!0,"vmlbutton_height_mismatch")}return p.appendChild(o),r?void l.handleAppMessages("vml_button_no_value"):p}(e,i);try{d.appendChild(u)}catch(e){return}r.tableTagWrapperAlign&&(a.align=r.tableTagWrapperAlign);r.tableTagWrapperClass&&(a.className=r.tableTagWrapperClass);a.width=r.tableTagWrapperWidth,r.tableTagWrapperBgcolor&&(a.bgColor=r.tableTagWrapperBgcolor);a.border="0",a.cellSpacing="0",a.cellPadding="0",a.setAttribute("role","presentation"),a.appendChild(o),o.appendChild(s),r.tdAlign&&(s.align=r.tdAlign);r.tdValign&&(s.vAlign=r.tdValign);return s.appendChild(p),h.appendChild(a),h}(e,r);try{o=a.querySelectorAll("*")}catch(e){return}var m=document.createElement("div");if("basic"===r.selectedRadio||"excludeimg"===r.selectedRadio||"posswitch"===r.selectedRadio){let t,i;for(let e=0;e<o.length;e++)"rtl"===o[e].getAttribute("dir")&&(t=e);switch(!0){case"imgbut"===r.buttonClicked:s=r.hasAnchor?o[o.length-2]:o[o.length-1];break;case"tdbut"===r.buttonClicked:i="basic"===r.selectedRadio?r.hasAnchor?o.length-3:o.length-2:"excludeimg"===r.selectedRadio?5:t,s=o[i];break;case"tablebut"===r.buttonClicked:i=r.hasWrapper?0:3,s=o[i]}m.appendChild(s),p=m.querySelectorAll("*"),u(e,r,p),d=p[0].outerHTML}else if("imgswap"===r.selectedRadio||"bgimage"===r.selectedRadio||"vmlbutton"===r.selectedRadio){let i,a,c;"tdbut"===r.buttonClicked?(a=1,i=o.length-a):r.hasWrapper?(a=6,i=o.length-a):(a=3,i=o.length-a),s=o[i],m.appendChild(s),p=m.querySelectorAll("*"),u(e,r,p),d=p[0].outerHTML,"imgswap"===r.selectedRadio?c=function(e,t){let i,r,a,o,c;return r=n(),i=l.initGetAppdata(),a="\n",o=r.imgSrc,o=o.replace(/(.jpg|.png|.gif|.svg)/g,"_mob$1"),c=`\n${h(t)}<a href="#"><img class="hide" alt="${r.imgAlt}" width="${r.imgWidth}" height="${r.imgHeight}" src="${r.imgSrc}" border="0" style="width: ${r.imgWidth}px; height: ${r.imgHeight}px; margin: 0; border: none; outline: none; text-decoration: none; display: block; "></a>\n${h(t)}\x3c!--[if !mso]>\x3c!--\x3e\n${h(t)}<span style="width:0; overflow:hidden; float:left; display:none; max-height:0; line-height:0;" class="mobileshow">\n${h(t)}<a href="#"><img class="mobileshow" alt="${r.imgAlt}" width="${i.sPhonesW}" height="${i.sPhonesH}" src="${o}" border="0" style="width: ${i.sPhonesW}px; height: ${i.sPhonesH}px; margin: 0; border: none; outline: none; text-decoration: none; display: block;" /></a>\n${h(t)}\x3c!--</span>--\x3e\n${h(t)}\x3c!--<![endif]--\x3e`,c}(0,a):"bgimage"===r.selectedRadio?c=function(e,i){let r,a,o,l,c;return r=n(),c="\n",o="#7bceeb",l=r.tdBgcolor?r.tdBgcolor:document.querySelector(t.iptCcpTdBgColor).value,a=`\n${h(i)}\x3c!--[if gte mso 9]>\n${h(i)}<v:rect xmlns:v="urn:schemas-microsoft-com:vml" fill="true" stroke="false" style="width:${r.imgWidth}px;height:${r.imgHeight}px;">\n${h(i)}<v:fill type="tile" src="${r.tdBackground}" color="${l}" />\n${h(i)}<v:textbox inset="0,0,0,0">\n${h(i)}<![endif]--\x3e\n${h(i)}<div>\n${h(i)}\x3c!-- Put Foreground Content Here --\x3e\n${h(i)}</div>\n${h(i)}\x3c!--[if gte mso 9]>\n${h(i)}  </v:textbox>\n${h(i)}</v:rect>\n${h(i)}<![endif]--\x3e`,a}(0,a):"vmlbutton"===r.selectedRadio&&(c=function(e,i){let r,a,o,l,c;r=n(),o="\n",l=document.querySelector(t.iptCcpTdHeight).value,c=document.querySelector(t.iptCcpTdWidth).value,a=`\n${h(i)}<div>\x3c!--[if mso]>\n${h(i)}<v:roundrect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="#" style="height:${l}px;v-text-anchor:middle;width:${c}px;" arcsize="10%" strokecolor="#1e3650" fill="t">\n${h(i)}<v:fill type="tile" src="${r.imgSrc}" color="#556270" />\n${h(i)}\n${h(i)}<w:anchorlock/>\n${h(i)}<center style="color:#ffffff;font-family:sans-serif;font-size:13px;font-weight:bold;">Show me the button!</center>\n${h(i)}</v:roundrect>\n${h(i)}<![endif]--\x3e<a href="#"\nstyle="background-color:#556270;background-image:url(${r.imgSrc});border:1px solid #1e3650;border-radius:4px;color:#ffffff;display:inline-block;font-family:sans-serif;font-size:13px;font-weight:bold;line-height:${l}px;text-align:center;text-decoration:none;width:${c}px;-webkit-text-size-adjust:none;mso-hide:all;">Show me the button!</a></div>`;return a}(0,a)),d=d.replace("/replacestart//replaceend/",c+"\n")}g(function(e){let t;"imgbut"===e&&(t=i.btnCcpMakeImgTag.slice(1));"tdbut"===e&&(t=i.btnCcpMakeTdTag.slice(1));"tablebut"===e&&(t=i.btnCcpMakeTableTag.slice(1));return t}(r.buttonClicked),d)}(e,r)}function u(e,t,i){let n,r,a=[],o=[];"imgswap"!==t.selectedRadio&&"bgimage"!==t.selectedRadio&&"vmlbutton"!==t.selectedRadio||(r=!0);for(let e=0;e<i.length;e++)a.push(h(e)),"stack-column-center"===i[e].className&&o.push(e);for(let e=0;e<i.length;e++)"IMG"===i[e].nodeName&&"A"===i[e].parentNode.nodeName||("A"===i[e].nodeName?(i[e].insertAdjacentHTML("beforebegin",h(e)),i[e].insertAdjacentHTML("afterend","\n")):0===o.length?e===i.length-1&&!0===r?(i[e].insertAdjacentHTML("beforebegin",h(e)),i[e].insertAdjacentHTML("afterbegin","/replacestart/"),i[e].insertAdjacentHTML("beforeend","/replaceend/"+h(e)),i[e].insertAdjacentHTML("afterend","\n")):(i[e].insertAdjacentHTML("afterend","\n"),i[e].insertAdjacentHTML("beforebegin",h(e)),i[e].insertAdjacentHTML("afterbegin","\n"),i[e].insertAdjacentHTML("beforeend",h(e))):(e<o[1]?(i[e].insertAdjacentHTML("afterend","\n"),i[e].insertAdjacentHTML("beforebegin",h(e)),i[e].insertAdjacentHTML("afterbegin","\n"),i[e].insertAdjacentHTML("beforeend",h(e))):(n=e-(o[1]-o[0]),i[e].insertAdjacentHTML("afterend","\n"),i[e].insertAdjacentHTML("beforebegin",h(n)),i[e].insertAdjacentHTML("afterbegin","\n"),i[e].insertAdjacentHTML("beforeend",h(n))),e===i.length-1&&(i[e].innerHTML="\n"+h(n)+"  \x3c!-- ADD YOUR CONTENT HERE --\x3e \n"+h(n))));return i}function h(e){let t,i;return t="  ",i="  ".repeat([e]),i}function g(e,t){let i;i=t;var n=new ClipboardJS("#"+e,{text:function(e){return n.on("success",(function(e){l.handleAppMessages("msg_copied_2_CB")})),n.on("error",(function(e){})),i}})}return{doClipboard:function(e){let t,i;switch(t=e.target.id,i=e.shiftKey?"shift":!!e.ctrlKey&&"ctrl",!0){case t.includes("tag"):d(t);break;case t.includes("css"):!function(e,t,i,r){let a=[];a=n();let o,c=[];switch(c=l.initGetAppdata(),!0){case e.includes("img-dsktp"):o=`img.${a.imgClass} { width: ${c.imgW}px !important; height: ${c.imgH}px !important; }`;break;case e.includes("img-smphn"):o=`img.${a.imgClass} { width: ${c.sPhonesW}px !important; height: ${c.sPhonesH}px !important; }`;break;case e.includes("img-lgphn"):o=`img.${a.imgClass} { width: ${c.lPhonesW}px !important; height: ${c.lPhonesH}px !important; }`;break;case e.includes("td-dsktp")||e.includes("td-smphn")||e.includes("td-lgphn"):o=a.tdHeight?`td.${a.tdClass} { height: ${a.tdHeight}px !important; }`:`td.${a.tdClass} {  }`;break;case e.includes("table-dsktp"):o=`table.${a.tableClass} { width: ${a.tableWidth}px !important; align: ${a.tableAlign} !important; }`;break;case e.includes("table-smphn"):o=`table.${a.tableClass} { width: ${c.sPhonesW}px !important; align: ${a.tableAlign} !important; }`;break;case e.includes("table-lgphn"):o=`table.${a.tableClass} { width: ${c.lPhonesW}px !important; align: ${a.tableAlign} !important; }`}o.includes("%")&&(o=o.replace("%px","%")),g(e,o)}(t);break;case t.includes("ins"):!function(e,t){let i,n,r,a;function o(e,t,i){let r,a,o;return e&&t?(r="width",a="height",n="shift"===i?r+'="'+e+'" height='+t+" ":"ctrl"===i?r+": "+e+"px; height: "+t+"px; ":e+" X "+t):(r=e?"width":"height",o=e||t,n="shift"===i?r+'="'+o+'" ':"ctrl"===i?r+": "+o+"px; ":o),n}switch(document.querySelector("#"+e).onmouseover=void 0,r=a="",i=l.initGetAppdata(!1),!0){case"ins-display-size-label"===e:r=i.imgW,a=i.imgH,n=o(r,a,t);break;case"ins-small-phones-label"===e:r=i.sPhonesW,a=i.sPhonesH,n=o(r,a,t);break;case"ins-large-phones-label"===e:r=i.lPhonesW,a=i.lPhonesH,n=o(r,a,t);break;case"ins-display-size-width-value"===e:r=i.imgW,n=o(r,a,t);break;case"ins-display-size-height-value"===e:a=i.imgH,n=o(r,a,t);break;case"ins-small-phones-width-value"===e:r=i.sPhonesW,n=o(r,a,t);break;case"ins-small-phones-height-value"===e:a=i.sPhonesH,n=o(r,a,t);break;case"ins-large-phones-width-value"===e:r=i.lPhonesW,n=o(r,a,t);break;case"ins-large-phones-height-value"===e:a=i.lPhonesH,n=o(r,a,t)}g(e,n)}(t,i)}return t},runTest:function(){}}}(),l=function(e,t){const i=t.getInspectorElementIDs(),n=t.getInspectorValuesIDs(),r=t.getInspectorLabelsIDs(),c=t.getDynamicRegionIDs(),s=t.getStaticRegionIDs(),p=t.getToolButtonIDs(),d=t.getCcpUserInputIDs(),u=(t.getCcpUserInputLabelIds(),t.getBtnCcpMakeClips()),h=t.getAppMessageElements();var g=function(e){l.handleAppMessages(e)};function m(e){document.querySelector("#cur-img-container").parentNode.removeChild(document.querySelector("#cur-img-container")),e.stopPropagation(),e.preventDefault();var t=e.dataTransfer.files[0];if(t.type.match("image.*")){var n,r=new FileReader;r.onload=(n=t,function(e){var t=new Image;let r;t.id="cur-img",t.src=e.target.result,r=n.name,document.querySelector(i.insFilename).textContent=r,document.querySelector(s.dropArea).style.display="none",function(e,t){var i=document.createElement("div");i.id="cur-img-container",document.getElementById("main-image").insertBefore(i,null),document.getElementById("cur-img-container").insertBefore(e,null),document.querySelector(c.curImg).style.display="none",t(e)}(t,(function(){setTimeout(()=>{t.onload=(document.querySelector(s.dropArea).style.display="none",document.querySelector(s.tbrContainer).style.display="flex",t.style.display="block",void S())},250)}))}),r.readAsDataURL(t)}else;}function b(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function f(e){el=document.getElementById(this.id),this.select()}function y(e){var t;t=l.initGetAppdata(),prop=L(this.id),"imgW"===prop||"imgH"===prop?this.value="":this.value=t[prop]}function v(e){e.target.value}function C(e){var t=document.getElementById(this.id),i={};i.target=t.id;try{var n=[];for(let e=0;e<n.length;e++)document.querySelector(n[e])}catch(e){}if("click"===event.type)switch(!0){case t.id.includes("tbr"):var r,a;a=l.initGetAppdata(),i.prop="imgW",r=parseInt(t.id.slice(-2)),t.id.includes("incr")||(r=-r),r=a.imgW+r,i.val=r,T(i)||k(i)}else("drop"===event.type||"dragover"===event.type)&&e.preventDefault}function _(e){try{var t;t=Object.values(h);for(let e=0;e<t.length;e++)document.getElementById(t[e]).classList.contains("active")}catch(e){}if(keydown=e.which||e.keyCode||e.key,9==keydown||13==keydown){var i,n,r,a={};r=l.initGetAppdata(),i=document.getElementById(this.id),a.target=i.id,a.val=this.value,a.prop=L(this.id),n=13==keydown,!(9==keydown)||""!==this.value&&this.value!=r[a.prop]?T(a)?(n||e.preventDefault(),this.select()):("imgW"!==a.prop&&"imgH"!==a.prop||(n?this.select():(this.value="",this.blur())),k(a)):"imgW"!==a.prop&&"imgH"!==a.prop||(this.onblur=function(){this.value=""})}}function w(e){let t,i;t=L(this.id),keyup=e.which||e.keyCode||e.key,27==keyup&&("imgW"===t||"imgH"===t?(this.value="",this.blur()):(i=l.getLocalStorage(),"viewerW"===t?i[0]?this.value=i[0]:this.value=document.querySelector(p.iptTbrViewerW).placeholder:"sPhonesW"===t?i[1]?this.value=i[1]:this.value=document.querySelector(p.iptTbrSPhonesWidth).placeholder:"lPhonesW"===t&&(i[2]?this.value=i[2]:this.value=document.querySelector(p.iptTbrLPhonesWidth).placeholder)))}function T(e){const{target:t,prop:i,val:n}=e;let r;var a;a=!1;var o;o=l.initGetAppdata();if(function(e){let t;!parseInt(e,10)||e%1!=0||e<0?t=!0:(e=parseInt(e),t=!1);return t}(n))r="err_not_Integer",a=!0;else switch(!0){case"viewerW"===i:n<o.imgW||(n>800?(a=!0,r="err_viewerW_GT_maxViewerWidth"):a=!1);break;case"imgW"===i:n>o.viewerW&&(a=!0,r="err_imgW_GT_viewerW")}return a?l.handleAppMessages(r):a=!1,a}function k(e){let t,i,n,r,a={};a=l.initGetAppdata();const{target:o,prop:s,val:d}=e;switch(!0){case"viewerW"===s:n=[s,d],r="";break;case"imgW"===s:t=d*(1/a.aspect[0]),n=[s,d],r=["imgH",t];break;case"imgH"===s:i=d*a.aspect[0],n=[s,d],r=["imgW",i];break;case"sPhonesW"===s||"lPhonesW"===s:n=[s,d],r=""}!function(...e){let t,i;for(let n=0;n<e.length;n++)switch(t=e[n][0],i=e[n][1],!0){case!t:break;case"viewerW"===t:document.querySelector(c.imgViewer).style.width=i+"px",localStorage.setItem("viewerW",i);break;case"imgW"===t:document.querySelector(c.curImg).style.width=i+"px";break;case"imgH"===t:document.querySelector(c.curImg).style.height=i+"px";break;case"sPhonesW"===t:document.querySelector(p.iptTbrSPhonesWidth).setAttribute("data-sphonesw",i),localStorage.setItem("sPhonesW",i);break;case"lPhonesW"===t:document.querySelector(p.iptTbrLPhonesWidth).setAttribute("data-lphonesw",i),localStorage.setItem("lPhonesW",i)}}(n,r),S()}function S(){let e,i,n,r,a={};var o,s;switch(a=l.initGetAppdata(!1),n=window.getComputedStyle(document.querySelector(c.imgViewer)),r=l.getLocalStorage(),r[0]?(e=r[0],document.querySelector(c.imgViewer).style.width=r[0]+"px"):e=parseInt(n.getPropertyValue("width"),10),i=parseInt(n.getPropertyValue("height"),10),0===a.imgW?(o=a.imgNW,s=a.imgNH):(o=a.imgW,s=a.imgH),!0){case o<=e&&a.imgNH<i:o=a.imgNW,s=a.imgNH;break;case o>e&&s<i:a.imgW=e,a.imgH=Math.round(1/a.aspect[0]*a.imgW),i=a.imgH;break;case o<=e&&s>i:i=a.imgH=a.imgNH,a.imgW=a.imgNW;break;case o>e&&s>i:a.imgW=e,a.imgH=Math.round(1/a.aspect[0]*a.imgW),i=a.imgH}!function(e,i,n){let r,a;n<=450?r=(e=450)+145:(e=n,r=n+145);a=r,document.querySelector(c.curImg).style.width=i+"px",document.querySelector(c.curImg).style.height=n+"px",document.querySelector(c.imgViewer).style.height=e+"px",document.querySelector(c.imgViewport).style.height=r+"px",document.querySelector(c.appContainer).style.height=a+"px",t.writeInspectors()}(i,a.imgW,a.imgH)}function W(){var e=l.initGetAppdata();let t,i,n;if(document.querySelector(s.ccpContainer).classList.toggle("active"),document.querySelector(s.ccpContainer).classList.contains("active")){t=[d.spnCcpImgIncludeWidthHeightCheckmrk,d.spnCcpImgIncludeAnchorCheckmrk,d.spnCcpTableIncludeWrapperCheckmrk],i=[];for(let e=0;e<t.length;e++)document.querySelector(t[e]).addEventListener("click",A,!1);let r=["#ccp-table-wrapper-class","#ccp-table-wrapper-width","#ccp-table-wrapper-align","#ccp-table-wrapper-bgcolor"];for(let e=0;e<r.length;e++)document.querySelector(r[e]).style.display="none";n=document.querySelector('input[name="tdoptions"]:checked'),n.click(),document.querySelector(d.iptCcpTableWidth).value=""+e.imgW,document.querySelector(d.iptCcpTableWrapperWidth).value=""+e.viewerW,document.querySelector(d.iptCcpTableWrapperClass).value="devicewidth"}}function A(e){var t,i,n=l.initGetAppdata(),r=[];if(t=(t=(t=e.target.id).replace("mrk","box")).replace("spn","chk"),(i=document.getElementById(t)).checked?i.checked=!1:i.checked=!0,document.querySelector(d.iptCcpTableWrapperWidth).value=""+n.viewerW,document.querySelector(d.iptCcpTableWrapperClass).value="devicewidth","chk-ccp-table-include-wrapper-checkbox"===i.id)if(r=["#ccp-table-wrapper-class","#ccp-table-wrapper-width","#ccp-table-wrapper-align","#ccp-table-wrapper-bgcolor"],i.checked)for(let e=0;e<r.length;e++)document.querySelector(r[e]).style.display="block";else for(let e=0;e<r.length;e++)document.querySelector(r[e]).style.display="none"}function x(e){var t=[];if(t[0]=document.querySelector(u.btnCcpMakeImgDsktpCssRule),t[1]=document.querySelector(u.btnCcpMakeImgSmphnCssRule),t[2]=document.querySelector(u.btnCcpMakeImgLgphnCssRule),t[3]=document.querySelector(u.btnCcpMakeTdDsktpCssRule),t[4]=document.querySelector(u.btnCcpMakeTdSmphnCssRule),t[5]=document.querySelector(u.btnCcpMakeTdLgphnCssRule),t[6]=document.querySelector(u.btnCcpMakeTableDsktpCssRule),t[7]=document.querySelector(u.btnCcpMakeTableSmphnCssRule),t[8]=document.querySelector(u.btnCcpMakeTableLgphnCssRule),"#"+e.target.id==d.iptCcpImgClass)for(let e=0;e<=2;e++)this.value?t[e].classList.add("active"):t[e].classList.remove("active");else if("#"+e.target.id===d.iptCcpTdClass)for(let e=3;e<=5;e++)this.value?t[e].classList.add("active"):t[e].classList.remove("active");else if("#"+e.target.id===d.iptCcpTableClass)for(let e=6;e<=8;e++)this.value?t[e].classList.add("active"):t[e].classList.remove("active")}function I(){let e,t=window.location.href+"?isolate="+!0;e=window.open(t,"targetWindow","toolbar=no,\n        location=yes,\n        status=no,\n        menubar=no,\n        scrollbars=no,\n        resizable=no,\n        width=870,\n        height=775")}function L(e){var t={viewerW:"ipt-tbr-viewerw",imgW:"ipt-tbr-imgwidth",imgH:"ipt-tbr-imgheight",sPhonesW:"ipt-tbr-sphones-width",lPhonesW:"ipt-tbr-lphones-width"};return Object.keys(t).find(i=>t[i]===e)}return document.addEventListener("DOMContentLoaded",(function(){const e=document.querySelector(":root");document.addEventListener("keydown",(function(t){t.altKey&&t.ctrlKey&&(e.classList.add("modifier-pressed"),function(){function e(e,t,i,n){e.addEventListener(t,i,n)}var t=Object.values(p);let i;for(let n=0;n<t.length;n++)i=document.querySelector(t[n]),e(i,"mouseenter",g,!0);var a=Object.values(r);for(let t=0;t<a.length;t++)i=document.querySelector(a[t]),e(i,"mouseenter",g,!0);var o=Object.values(n);for(let t=0;t<o.length;t++)i=document.querySelector(o[t]),e(i,"mouseenter",g,!0);var l=Object.values(d);for(let t=0;t<l.length;t++)i=document.querySelector(l[t]),e(i,"mouseenter",g,!0);let c,s;for(let t=0;t<l.length;t++)c=l[t],c.includes("checkmrk")?(c=c.replace(/spn-/g,""),c=c.replace(/checkmrk/g,"label")):c+="-label",s=document.querySelector(c),e(s,"mouseenter",g,!0);var h=Object.values(u);for(let t=0;t<h.length;t++)i=document.querySelector(h[t]),e(i,"mouseenter",g,!0)}())})),document.addEventListener("keyup",(function(t){if(t.altKey||t.ctrlKey){let t,i;i=document.querySelector(s.appBlocker),e.classList.remove("modifier-pressed"),t=document.querySelector(h.tipContent),t.innerHTML="",i.classList.contains("active")&&i.classList.remove("active"),function(){function e(e,t,i,n){e.removeEventListener(t,i,n)}var t=Object.values(p);let i;for(let n=0;n<t.length;n++)i=document.querySelector(t[n]),e(i,"mouseenter",g,!0);var a=Object.values(r);for(let t=0;t<a.length;t++)i=document.querySelector(a[t]),e(i,"mouseenter",g,!0);var o=Object.values(n);for(let t=0;t<o.length;t++)i=document.querySelector(o[t]),e(i,"mouseenter",g,!0);var l=Object.values(d);for(let t=0;t<l.length;t++)i=document.querySelector(l[t]),e(i,"mouseenter",g,!0);let c,s;for(let t=0;t<l.length;t++)c=l[t],c.includes("checkmrk")?(c=c.replace(/spn-/g,""),c=c.replace(/checkmrk/g,"label")):c+="-label",s=document.querySelector(c),e(s,"mouseenter",g,!0);var h=Object.values(u);for(let t=0;t<h.length;t++)i=document.querySelector(h[t]),e(i,"mouseenter",g,!0)}()}}))})),{initCalcViewerSize:function(){S()},initInitCCP:function(){W()},handleAppMessages:function(e){let t,i,n,r,o,c,s;t=e,"object"==typeof t&&(c="#"+e.target.id,t="tip_"+e.target.id.replace(/-/gi,"_"),i="tip"),o="#"+t.slice(0,3)+"-content",n=function(e){let t,i;t=l.initGetAppdata(),i="";const n={msg_copied_2_CB:"Code snippet copied to Clipboard!",err_not_Integer:"This value has to be a positive whole number - try again or press ESC.",err_imgW_GT_viewerW:`Image width must be less than the current parent table width of ${t.viewerW}px. Make the parent table wider first.`,err_tbButton_LT_zero:"Image dimension can't be less than 1.",err_tbButton_GT_viewerW:`Image can't be wider than its parent table. Parent table width is currently ${t.viewerW}px`,err_viewerW_GT_maxViewerWidth:"Parent table width can't exceed can't exceed app width: 800px.",err_not_an_integer:"Not an integer: please enter a positive whole number for width.",err_vmlbutton_no_value:"Height and width must be entered to create a VML button.",err_vmlbutton_height_mismatch:"Is the correct image loaded? Img height should match entry. Check the code output. ",tip_ipt_tbr_viewerw:'Set the width of the image\'s parent table for Clipboard output.<br /><span style="white-space: nowrap">Maximum width is 800px.</span>',tip_btn_tbr_incr50:'Increase the image width by 50px and set the height proportionally. <span style="white-space: nowrap">The width can\'t exceed parent table width.</span>',tip_btn_tbr_incr10:'Increase the image width by 10px and set the height proportionally. <span style="white-space: nowrap">The width can\'t exceed the width of the parent table.</span>',tip_btn_tbr_incr01:'Increase the image width by 1px and set the height proportionally. <span style="white-space: nowrap">The width can\'t exceed the width of the parent table.</span>',tip_ipt_tbr_imgwidth:'Set the image display width and resize height proportionally. <span style="white-space: nowrap">Image width can\'t exceed parent table width.</span>',tip_ipt_tbr_imgheight:'Set the image display height and resize width proportionally. <span style="white-space: nowrap">Image width can\'t exceed parent table width.</span>',tip_btn_tbr_decr01:"Decrease the image width by 1px and set the height proportionally.",tip_btn_tbr_decr10:"Decrease the image width by 10px and set the height proportionally.",tip_btn_tbr_decr50:"Decrease the image width by 50px and set the height proportionally.",tip_ipt_tbr_sphones_width:"Set the width for small mobile devices to be used for CSS Clipboard output.",tip_ipt_tbr_lphones_width:"Set the width for larger mobile devices to be used for CSS Clipboard output.",tip_ins_display_size_label:"Displays the scaled image dimensions if smaller than Size On Disk. Set width or height in toolbar. Shift+Click to copy attributes. Ctrl+Click to copy style properties.",tip_ins_display_size_width_value:'Click to copy the width, SHIFT+Click to copy width attribute, <span style="white-space: nowrap">CTRL+Click to copy width style property.</span>',tip_ins_display_size_height_value:'Click to copy the height, SHIFT+Click to copy height attribute, <span style="white-space: nowrap">CTRL+Click to copy height style property.</span>',tip_ins_disk_size_label:"Displays the actual resolution of the image as stored on disk. For retina devices, the file's actual resolution should be at least twice the display size.",tip_ins_aspect_label:"Displays the aspect ratio (width: height) of the current image.",tip_ins_small_phones_label:"Set the image width for small mobile devices. Image height is calculated proportionally. Shift+Click to copy attributes. Ctrl+Click to copy style properties.",tip_ins_small_phones_width_value:'Click to copy the width, SHIFT+Click to copy width attribute, <span style="white-space: nowrap">CTRL+Click to copy width style property.</span>',tip_ins_small_phones_height_value:'Click to copy the height, SHIFT+Click to copy height attribute, <span style="white-space: nowrap">CTRL+Click to copy height style property.</span>',tip_ins_large_phones_label:"Set the image width for larger mobile devices. Image height is calculated proportionally. Shift+Click to copy attributes. Ctrl+Click to copy style properties.",tip_ins_large_phones_width_value:'Click to copy the width, SHIFT+Click to copy width attribute, <span style="white-space: nowrap">CTRL+Click to copy width style property.</span>',tip_ins_large_phones_height_value:'Click to copy the height, SHIFT+Click to copy height attribute, <span style="white-space: nowrap">CTRL+Click to copy height style property.</span>',tip_ins_retina_label:"Displays the recommended image file resolution at the current display size. If this value is less than 2X the display, small phones or large phones values, those values are shown in red.",tip_btn_ccp_make_img_tag:"Output an HTML IMG tag with the selected options to the Clipboard.",tip_btn_ccp_make_td_tag:"Output an HTML TD tag with the selected options to the Clipboard.",tip_btn_ccp_make_table_tag:"Output and HTML TABLE tag with the selected options to the Clipboard",tip_sel_ccp_img_align:"Set the align attribute of the IMG tag.",tip_sel_ccp_img_align_label:"Set the align attribute of the IMG tag.",tip_ipt_ccp_img_class:"Add a class attribute to the IMG tag. If a class is entered, the Make Image CSS Rule buttons appear.",tip_ipt_ccp_img_class_label:"Add a class attribute to the IMG tag. If a class is entered, the Make Image CSS Rule buttons appear.",tip_ipt_ccp_img_relpath:"Enter the relative path to the image to include in the src attribute of the Clipboard output. The default is 'img'",tip_ipt_ccp_img_relpath_label:"Enter the relative path to the image to include in the src attribute of the Clipboard output. The default is 'img'",tip_ipt_ccp_img_alt:"Enter text for the ALT attribute of the Clipboard output. You can use placeholder text and replace it globally later.",tip_ipt_ccp_img_alt_label:"Enter text for the ALT attribute of the Clipboard output. You can use placeholder text and replace it globally later.",tip_ccp_img_include_width_height:"If checked, width and height will be added to the IMG tag's style attribute in the Clipboard output.",tip_ccp_img_include_width_height_label:"If checked, width and height will be added to the IMG tag's style attribute in the Clipboard output.",tip_ccp_img_include_anchor:"If checked, the IMG tag will be wrapped in an A tag with the HREF attribute set to # in the Clipboard output",tip_ccp_img_include_anchor_label:"If checked, the IMG tag will be wrapped in an A tag with the HREF attribute set to # in the Clipboard output",tip_sel_ccp_td_align:"Set the TD tag's align attribute. The default is 'left'",tip_sel_ccp_td_align_label:"Set the TD tag's align attribute. The default is 'left'",tip_sel_ccp_td_valign:"Set the TD tag's valign attribute. The default is 'top'",tip_sel_ccp_td_valign_label:"Set the TD tag's valign attribute. The default is 'top'",tip_ipt_ccp_td_class:"Add a class attribute to the TD tag. If a class is entered, the Make TD CSS Rule buttons appear.",tip_ipt_ccp_td_class_label:"Add a class attribute to the IMG tag. If a class is entered, the Make TD CSS Rule buttons appear.",tip_ipt_ccp_td_bgcolor:"Set the bgcolor attribute for the TD tag. You can use a hex value,a valid CSS color alias or any string. Hex values must be prepended with a # character.",tip_ipt_ccp_td_bgcolor_label:"Set the bgcolor attribute for the TD tag. You can use a hex value, a CSS color alias or any string. Hex values must be prepended with a # character.",tip_rdo_ccp_td_basic:"TBD",tip_rdo_ccp_td_basic_label:"TBD",tip_rdo_ccp_td_excludeimg:"TBD",tip_rdo_ccp_td_excludeimg_label:"TBD",tip_rdo_ccp_td_posswitch:"TBD",tip_rdo_ccp_td_poswitch_label:"TBD",tip_rdo_ccp_td_bgimage:"TBD",tip_rdo_ccp_td_bgimage_label:"TBD",tip_rdo_ccp_td_vmlbutton:"TBD",tip_rdo_ccp_td_vmlbutton_label:"TBD",tip_ipt_ccp_table_class:"Add a class attribute to the parent TABLE tag. If a class is entered, the Make TABLE CSS Rule buttons appear.",tip_ipt_ccp_table_class_label:"Add a class attribute to the parent TABLE tag. If a class is entered, the Make TABLE CSS Rule buttons appear.",tip_ipt_ccp_table_width:"TBD",tip_ipt_ccp_table_width_label:"TBD",tip_sel_ccp_table_align:"Set the parent TABLE tag's align attribute. The default is 'left'",tip_sel_ccp_table_align_label:"Set the parent TABLE tag's align attribute. The default is 'left'",tip_ipt_ccp_table_bgcolor:"Set the bgcolor attribute for the parent TABLE tag. You can use a hex value,a valid CSS color alias or any string. Hex values must be prepended with a # character.",tip_ipt_ccp_table_bgcolor_label:"Set the bgcolor attribute for the parent TABLE tag. You can use a hex value, a CSS color alias or any string. Hex values must be prepended with a # character.",tip_ccp_table_include_wrapper:"TBD",tip_ccp_table_include_wrapper_label:"TBD",tip_ipt_ccp_table_wrapper_class:"Add a class attribute to the wrapper TABLE tag or accept the default 'devicewidth'. ",tip_ipt_ccp_table_wrapper_class_label:"Add a class attribute to the wrapper TABLE tag or accept the default 'devicewidth'.",tip_ipt_ccp_table_wrapper_width:"TBD",tip_ipt_ccp_table_wrapper_width_label:"TBD",tip_sel_ccp_table_wrapper_align:"Set the wrapper TABLE tag's align attribute. The default is 'left'",tip_sel_ccp_table_align_wrapper_label:"Set the wrapper TABLE tag's align attribute. The default is 'left'",tip_ipt_ccp_table_wrapper_bgcolor:"Set the bgcolor attribute for the wrapper TABLE tag. You can use a hex value,a valid CSS color alias or any string. Hex values must be prepended with a # character.",tip_ipt_ccp_table_bgcolor_wrapper_bgcolor_label:"Set the bgcolor attribute for the wrapper TABLE tag. You can use a hex value, a CSS color alias or any string. Hex values must be prepended with a # character."};for(let[t,r]of Object.entries(n))t===e&&(i=r);return i}(t),"err"===t.slice(0,3)?(r=2500,i="err"):"msg"===t.slice(0,3)&&(r=750,i="msg"),document.querySelector(o).innerHTML=n,"tip"===i?a.displayAppMessages(!0,o,c):a.displayAppMessages(!0,o,!1),"err"!==i&&"msg"!==i||(s=setTimeout(()=>{a.displayAppMessages(!1,o,!1)},r))},initGetAppdata:function(){return function(){var e,t,i,n,r,o={};return(o=a.queryDOMElements()).aspect=(e=o.imgNW,t=o.imgNH,n=e/t,i=function(e,t){if(t>e){var i=e;e=t,t=i}for(;0!=t;){var n=e%t;e=t,t=n}return e}(e,t),r=r=e/i+" : "+t/i,[n,r]),o.sPhonesH=Math.round(o.sPhonesW*(1/o.aspect[0])),o.lPhonesH=Math.round(o.lPhonesW*(1/o.aspect[0])),o}()},getLocalStorage:function(){let e=[],t=[];e=["viewerW","sPhonesW","lPhonesW"];for(let i=0;i<e.length;i++)localStorage.getItem(e[i])?t.push(localStorage.getItem(e[i])):t.push(!1);return t},init:function(){let e,l;e=window.location.href,"true"===e.substring(e.length-4)&&(document.querySelector(".header-container").style.display="none",document.querySelector(".header-isolate-app").style.display="none",document.querySelector(".content-section").style.display="none"),document.querySelector(s.ccpContainer).classList.remove("active"),function(){var e=document.querySelector(c.appContainer);function t(e,t,i,n){e.addEventListener(t,i,n)}e.addEventListener("dragover",b,!1),e.addEventListener("drop",m,!1),document.querySelector(s.hdrIsolateApp).addEventListener("click",I,!1);const l=[p.btnTbrIncr50,p.btnTbrIncr10,p.btnTbrIncr01,p.btnTbrDecr50,p.btnTbrDecr10,p.btnTbrDecr01];for(let e=0;e<l.length;e++)l[e]=document.querySelector(l[e]),t(l[e],"click",C,!1);const h=[p.iptTbrViewerW,p.iptTbrSPhonesWidth,p.iptTbrLPhonesWidth];for(let e=0;e<h.length;e++)h[e]=document.querySelector(h[e]),t(h[e],"click",v,!1);const g=[p.iptTbrViewerW,p.iptTbrImgWidth,p.iptTbrImgHeight,p.iptTbrSPhonesWidth,p.iptTbrLPhonesWidth];for(let e=0;e<g.length;e++)g[e]=document.querySelector(g[e]),t(g[e],"keydown",_,!1),t(g[e],"keyup",w,!1),t(g[e],"focus",f,!1),t(g[e],"blur",y,!1);const T=[r.insDisplaySizeLabel,r.insSmallPhonesLabel,r.insLargePhonesLabel,n.insDisplaySizeWidthValue,n.insDisplaySizeHeightValue,n.insSmallPhonesWidthValue,n.insSmallPhonesHeightValue,n.insLargePhonesWidthValue,n.insLargePhonesHeightValue];for(let e=0;e<T.length;e++)T[e]=document.querySelector(T[e]),t(T[e],"click",o.doClipboard,!1);const k=[r.insDisplaySizeLabel,r.insSmallPhonesLabel,r.insLargePhonesLabel,n.insDisplaySizeWidthValue,n.insDisplaySizeHeightValue,n.insSmallPhonesWidthValue,n.insSmallPhonesHeightValue,n.insLargePhonesWidthValue,n.insLargePhonesHeightValue];for(let e=0;e<k.length;e++)k[e]=document.querySelector(k[e]),t(k[e],"mouseenter",o.enteredMe,!1);const S=[d.iptCcpImgClass,d.iptCcpTdClass,d.iptCcpTableClass];for(let e=0;e<S.length;e++)S[e]=document.querySelector(S[e]),t(S[e],"input",x,!1);var A=[i.btnToggleCcp];for(let e=0;e<A.length;e++)A[e]=document.querySelector(A[e]),t(A[e],"click",W,!1);for(let e in u){let i;u.hasOwnProperty(e)&&(i=document.querySelector(u[e]),t(i,"click",o.doClipboard,!1))}for(let e in d){let i;"#rdo"===d[e].substring(0,4)&&(i=document.querySelector(d[e]),t(i,"click",a.displayTdOptions,!1))}}(),document.querySelector(c.curImg)?(l="devmode",t.initUI()):l="prdmode",t.initUI(l)}}}(0,a);l.init()}();window.onclick=function(e){var t;if("btn btn-link"===e.target.className){t=document.getElementsByClassName("overlay");for(let e=0;e<t.length;e++)t[e].style.display="block"}"overlay"===e.target.className&&(e.target.style.display="none")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
