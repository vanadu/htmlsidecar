02.23.20

https://rutorrent.ac.seedbox.link/
BQUDCq3YyJjs


BIG TODO!
TODO: Deal with the indents and embedded tag issue.


Status - ccpMakeTableTag works. Now we need to go back and and fix the td so that it incldues the bgimage.

        nodeList[0].innerHTML = '';
        foo = nodeList[1].innerHTML;
        nodeList[1].innerHTML = indentbefore + foo + indentafter;
        nodeList[0].innerHTML = nodeList[1].innerHTML;
        console.log('nodeList[0].outerHTML is: ' + nodeList[0].outerHTML);


        el1 = nodeList[0];
        el2 = nodeList[1];
        console.log('el1.outerHTML is: ' + el1.outerHTML);
        console.log('el2.outerHTML is: ' + el2.outerHTML);
        el1.insertAdjacentHTML('beforebegin', indentbefore);
        el1.insertAdjacentHTML('beforebegin', indentbefore);
        console.log('el1.outerHTML is: ' + el1.outerHTML);
        nodeList[0] = el1;
        console.log('nodeList.outerHTML is: ' + nodeList.outerHTML);


		
		console.log('container is: ' + container);
        container[0].insertAdjacentHTML('beforebegin', indentbefore);
        container[0].insertAdjacentHTML('afterend', indentafter);
        output = container.outerHTML;
        foo = nodeList[0];
        console.log('foo is: ' + foo);
		
		

    // !VA UIController private ccpMakeWrapperTableTag
    function makeSuperClip(id, indentLevel) { 
      console.log('makeSuperClip running ');
      console.log('id is: ' + id);
      var Attributes = getAttributes();
      let container = document.createElement('div');
      let tableOuter = document.createElement('table');
      let trOuter = document.createElement('tr');
      let tdOuter = document.createElement('td');
      let tableInner = document.createElement('table');
      let trInner = document.createElement('tr');
      let tdInner = document.createElement('td');
      let img = document.createElement('img');
      
      // !VA The container that will hold all the nodes, including tableOuter.
      container.appendChild(tableOuter);

      // !VA table wrapper class
      if (Attributes.tableTagWrapperAlign) { tableOuter.align = Attributes.tableTagWrapperAlign; }
      // !VA wrapper table align attribute
      if (Attributes.tableTagWrapperClass) { tableOuter.className = Attributes.tableTagWrapperClass; }

      // !VA width attribute
      // !VA the default is the current display size, so it gets the value from the field.
      tableOuter.width = Attributes.tableTagWrapperWidth;

      // !VA table bgcolor attribute. Pass the input value, don't prepend hex # character for nowtableTagWrapperBgcolor);
      if (Attributes.tableTagWrapperBgcolor) { tableOuter.bgColor = Attributes.tableTagWrapperBgcolor; }

      // !VA Add border, cellspacing and cellpadding
      tableOuter.border = '0', tableOuter.cellSpacing = '0', tableOuter.cellPadding = '0';
      
      // !VA Build the outer (wrapper) table
      tableOuter.appendChild(trOuter);
      trOuter.appendChild(tdOuter);

      // !VA Add the outer td attributes
      if (Attributes.tdAlign) { tdOuter.align = Attributes.tdAlign; }
      // !VA valign attribute
      if (Attributes.tdValign) { tdOuter.vAlign = Attributes.tdValign; }


      // !VA Build the inner table
      tdOuter.appendChild(tableInner);

      // !VA Add inner table attributes
      // !VA table class attribute
      if (Attributes.tableClass) { tableInner.className = Attributes.tableClass; }
      // table.className = Attributes.tableClass;
      // !VA table align attribute
      if (Attributes.tableAlign) { tableInner.align = Attributes.tableAlign; }
      // !VA width attribute -- the default is the current display size, so it gets the value from the toolbar viewerW input field.
      tableInner.width = Attributes.tableWidth;
      // !VA table bgcolor attribute. Pass the input value, don't prepend hex # character for now
      if (Attributes.tableBgcolor) { tableInner.bgColor = Attributes.tableBgcolor; }
      // !VA Add border, cellspacing and cellpadding
      tableInner.border = '0', tableInner.cellSpacing = '0', tableInner.cellPadding = '0';
      
      // !VA Build the inner tr
      tableInner.appendChild(trInner);
      // !VA Build the inner td
      trInner.appendChild(tdInner);

      // !VA Add the inner td attributes
      if (Attributes.tdAlign) { tdInner.align = Attributes.tdAlign; }
      // !VA valign attribute
      if (Attributes.tdValign) { tdInner.vAlign = Attributes.tdValign; }
      // !VA class attribute
      if (Attributes.tdClass) { tdInner.className = Attributes.tdClass; }
      // !VA bgcolor attribute. Pass the input value, don't prepend hex # character for now
      if (Attributes.tdBgcolor) { tdInner.bgColor = Attributes.tdBgcolor; }

      // !VA class attribute
      if (Attributes.imgClass) { img.className = Attributes.imgClass; }
      // !VA alt attribute
      if (Attributes.imgAlt) { img.alt = Attributes.imgAlt; }
      // src attribute;
      img.src = Attributes.imgSrc;
      // !VA width attribute
      img.width = Attributes.imgWidth;
      // !VA height attribute
      img.height = Attributes.imgHeight;
      // !VA style attribute
      img.setAttribute('style', Attributes.imgStyle);
      // !VA align attribute is deprecated in html5, so we need this hack if we want to include it, which we don't for now.
      if (Attributes.imgAlign) { img.align = Attributes.imgAlign; }
      // !VA border attribute
      img.border = '0';

      tdInner.appendChild(img);
      
      var superClipNodeList = container.outerHTML;
      console.log('superClipNodeList is: ');
      console.log(superClipNodeList);
      
      // writeClipboard(id, str);
      return container;
    }
    // !VA END makeSuperClip








For later:
TODO: The CSS output will need to be revisited. You'd never need to output the width AND height in CSS for tables and for td it probably has no effect for height. That means...ugh.
TODO: It's bad that writeClipboard is called even when that clipboard isn't being output. ccpMakeTdTag calls ccpMakeImgTag which calls writeClipboard -- that makes no sense. 



